# -*- coding: utf-8 -*-
"""sub1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OVeHAxphVxJpH_oRchZmEiXfsO8d-4jb
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import tensorflow as tf

df = pd.read_csv('/content/hotstar.csv')
df.head

df = df.drop(columns=['title'])
df = df.drop(columns=['hotstar_id'])
df = df.drop(columns=['year'])
df = df.drop(columns=['age_rating'])
df = df.drop(columns=['running_time'])
df = df.drop(columns=['seasons'])
df = df.drop(columns=['episodes'])
df = df.drop(columns=['genre'])
df.head

df.dropna(axis=0, subset=['description', 'type'], inplace=True)
category = pd.get_dummies(df.type)
df_baru = pd.concat([df, category], axis=1)
df_baru = df_baru.drop(columns='type')
df_baru

deskripsi = df_baru['description'].values
label = df_baru[['movie', 'tv']].values

deskripsi_latih, deskripsi_test, label_latih, label_test = train_test_split(deskripsi, label, test_size=0.2)

tokenizer = Tokenizer(num_words=5000, oov_token='<oov>', filters ='!"#$%()*+,-./:;<=>?@[\]^_`{|}~', lower=True) 
tokenizer.fit_on_texts(deskripsi_latih) 
tokenizer.fit_on_texts(deskripsi_test)
 
sekuens_latih = tokenizer.texts_to_sequences(deskripsi_latih)
sekuens_test = tokenizer.texts_to_sequences(deskripsi_test)
 
padded_latih = pad_sequences(sekuens_latih) 
padded_test = pad_sequences(sekuens_test)

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=5000, output_dim=16),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(2, activation='softmax')
])
model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

class myCallback(tf.keras.callbacks.Callback):

  def on_epoch_end(self, epoch, logs={}):

    if(logs.get('accuracy') > 0.75  and logs.get('val_accuracy') > 0.75 ):  

      print("\nAkurasi dan validasi telah mencapai >75%!")

      self.model.stop_training = True

callbacks = myCallback()

num_epochs = 30
history = model.fit(padded_latih, label_latih, epochs=num_epochs, 
                    validation_data=(padded_test, label_test), verbose=2, callbacks=[callbacks])